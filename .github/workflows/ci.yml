name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always
  FLUTTER_CHANNEL: 'master'  # Use master channel to match release.yml (Dart 3.7+ required)
  RUST_VERSION: 'stable'  # 使用最新稳定版 (需要 1.81.0+ 以支持新依赖)
  # Disable interactive prompts
  CI: true
  FLUTTER_SUPPRESS_ANALYTICS: true
  PUB_ENVIRONMENT: bot.github

jobs:
  # 代码质量检查 - 所有事件都运行
  code-quality:
    name: Code Quality (Format & Lint)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          core/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check Rust formatting
      run: cargo fmt --all -- --check
      working-directory: ./core

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      working-directory: ./core

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: ./app

    - name: Check Flutter formatting
      run: dart format --output=none --set-exit-if-changed .
      working-directory: ./app

    - name: Analyze Flutter code
      run: flutter analyze --no-fatal-infos --no-fatal-warnings
      working-directory: ./app

  # 单元测试 - 所有事件都运行（仅Ubuntu以加快速度）
  unit-tests:
    name: Unit Tests (Ubuntu)
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          core/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Rust tests
      run: cargo test --all --verbose
      working-directory: ./core

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: ./app

    - name: Run Flutter tests
      run: flutter test
      working-directory: ./app

  # 跨平台测试 - 仅在 PR 或手动触发时运行
  cross-platform-tests:
    name: Cross-Platform Tests
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          core/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run Rust tests
      run: cargo test --all --verbose
      working-directory: ./core

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: ./app

    - name: Run Flutter tests
      run: flutter test
      working-directory: ./app

  # Security Audit - 仅在 PR 或手动触发时运行
  security-audit:
    name: Security Audit
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit --ignore RUSTSEC-2023-0071
      working-directory: ./core
      continue-on-error: true

  # Code Coverage - 仅在 PR 或手动触发时运行
  coverage:
    name: Code Coverage
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
      working-directory: ./core

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./core/lcov.info
        fail_ci_if_error: false

  # 完整构建 - 仅在手动触发或发布标签时运行
  build-full:
    name: Full Build (All Platforms)
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    needs: [cross-platform-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            flutter-target: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            flutter-target: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            flutter-target: macos

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev

    - name: Build Rust release
      run: cargo build --release --target ${{ matrix.target }}
      working-directory: ./core

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: ./app

    - name: Build Flutter release
      run: flutter build ${{ matrix.flutter-target }} --release
      working-directory: ./app

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: v8ray-${{ matrix.target }}
        path: |
          core/target/${{ matrix.target }}/release/
          app/build/
        retention-days: 30
