name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  FLUTTER_VERSION: '3.27.1'  # Latest stable version (2024-12)

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            flutter-target: linux
            asset-name: v8ray-linux-x64
            asset-ext: tar.gz
          - os: windows-latest
            flutter-target: windows
            asset-name: v8ray-windows-x64
            asset-ext: zip
          - os: macos-latest
            flutter-target: macos
            asset-name: v8ray-macos-x64
            asset-ext: tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev

    - name: Build Rust library (release)
      run: cargo build --release --lib
      working-directory: ./core

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: ./app

    - name: Build Flutter release
      run: flutter build ${{ matrix.flutter-target }} --release
      working-directory: ./app

    - name: Download Xray Core (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: bash scripts/post_build.sh release

    - name: Download Xray Core (Windows)
      if: matrix.os == 'windows-latest'
      run: scripts\post_build.bat release
      shell: cmd

    - name: Package release (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd app/build/linux/x64/release/bundle
        tar -czf ../../../../../${{ matrix.asset-name }}.tar.gz .

    - name: Package release (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd app/build/windows/x64/runner/Release
        Compress-Archive -Path * -DestinationPath ../../../../../${{ matrix.asset-name }}.zip
      shell: pwsh

    - name: Package release (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd app/build/macos/Build/Products/Release
        tar -czf ../../../../../${{ matrix.asset-name }}.tar.gz .

    - name: Upload Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.asset-name }}.${{ matrix.asset-ext }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
