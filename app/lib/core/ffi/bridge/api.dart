// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import '../frb_generated.dart';
import '../lib.dart';
import '../platform.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `V8RayEvent`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `clone`, `eq`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `create_event_stream`

/// 初始化 V8Ray Core
///
/// 必须在使用其他 API 之前调用
///
/// # 返回
/// - `Ok(())`: 初始化成功
/// - `Err(e)`: 初始化失败
Future<void> initV8Ray() => V8RayBridge.instance.api.crateBridgeApiInitV8Ray();

/// 关闭 V8Ray Core
///
/// 释放所有资源
///
/// # 返回
/// - `Ok(())`: 关闭成功
/// - `Err(e)`: 关闭失败
Future<void> shutdownV8Ray() =>
    V8RayBridge.instance.api.crateBridgeApiShutdownV8Ray();

/// 加载配置
///
/// # 参数
/// - `config_id`: 配置 ID
///
/// # 返回
/// - `Ok(config)`: 配置信息
/// - `Err(e)`: 加载失败
Future<ConfigInfo> loadConfig({required String configId}) =>
    V8RayBridge.instance.api.crateBridgeApiLoadConfig(configId: configId);

/// 保存配置
///
/// # 参数
/// - `config`: 配置信息
///
/// # 返回
/// - `Ok(())`: 保存成功
/// - `Err(e)`: 保存失败
Future<void> saveConfig({required ConfigInfo config}) =>
    V8RayBridge.instance.api.crateBridgeApiSaveConfig(config: config);

/// 删除配置
///
/// # 参数
/// - `config_id`: 配置 ID
///
/// # 返回
/// - `Ok(())`: 删除成功
/// - `Err(e)`: 删除失败
Future<void> deleteConfig({required String configId}) =>
    V8RayBridge.instance.api.crateBridgeApiDeleteConfig(configId: configId);

/// 列出所有配置
///
/// # 返回
/// - `Ok(configs)`: 配置列表
/// - `Err(e)`: 列出失败
Future<List<ConfigInfo>> listConfigs() =>
    V8RayBridge.instance.api.crateBridgeApiListConfigs();

/// 验证配置
///
/// # 参数
/// - `config`: 配置信息
///
/// # 返回
/// - `Ok(true)`: 配置有效
/// - `Ok(false)`: 配置无效
/// - `Err(e)`: 验证失败
Future<bool> validateConfig({required ConfigInfo config}) =>
    V8RayBridge.instance.api.crateBridgeApiValidateConfig(config: config);

/// 缓存代理配置（在连接前调用）
///
/// # 参数
/// - `config_id`: 配置 ID
/// - `config`: 代理服务器配置
///
/// # 返回
/// - `Ok(())`: 缓存成功
/// - `Err(e)`: 缓存失败
Future<void> cacheProxyConfig({
  required String configId,
  required ProxyServerConfig config,
}) => V8RayBridge.instance.api.crateBridgeApiCacheProxyConfig(
  configId: configId,
  config: config,
);

/// 设置代理模式
///
/// # 参数
/// - `mode`: 代理模式 ("global", "smart", "direct")
///
/// # 返回
/// - `Ok(())`: 设置成功
/// - `Err(e)`: 设置失败
Future<void> setProxyMode({required String mode}) =>
    V8RayBridge.instance.api.crateBridgeApiSetProxyMode(mode: mode);

/// 连接到服务器
///
/// # 参数
/// - `config_id`: 配置 ID
///
/// # 返回
/// - `Ok(())`: 连接成功
/// - `Err(e)`: 连接失败
Future<void> connect({required String configId}) =>
    V8RayBridge.instance.api.crateBridgeApiConnect(configId: configId);

/// 断开连接
///
/// # 返回
/// - `Ok(())`: 断开成功
/// - `Err(e)`: 断开失败
Future<void> disconnect() =>
    V8RayBridge.instance.api.crateBridgeApiDisconnect();

/// 获取连接信息
///
/// # 返回
/// - `Ok(info)`: 连接信息
/// - `Err(e)`: 获取失败
Future<ConnectionInfo> getConnectionInfo() =>
    V8RayBridge.instance.api.crateBridgeApiGetConnectionInfo();

/// 测试连接延迟
///
/// # 参数
/// - `config_id`: 配置 ID
///
/// # 返回
/// - `Ok(latency_ms)`: 延迟（毫秒）
/// - `Err(e)`: 测试失败
Future<int> testLatency({required String configId}) =>
    V8RayBridge.instance.api.crateBridgeApiTestLatency(configId: configId);

/// 初始化订阅管理器
///
/// # 参数
/// - `db_path`: 数据库路径
///
/// # 返回
/// - `Ok(())`: 初始化成功
/// - `Err(e)`: 初始化失败
Future<void> initSubscriptionManager({required String dbPath}) => V8RayBridge
    .instance
    .api
    .crateBridgeApiInitSubscriptionManager(dbPath: dbPath);

/// 添加订阅
///
/// # 参数
/// - `name`: 订阅名称
/// - `url`: 订阅 URL
///
/// # 返回
/// - `Ok(id)`: 订阅 ID
/// - `Err(e)`: 添加失败
Future<String> addSubscription({required String name, required String url}) =>
    V8RayBridge.instance.api.crateBridgeApiAddSubscription(
      name: name,
      url: url,
    );

/// 删除订阅
///
/// # 参数
/// - `id`: 订阅 ID
///
/// # 返回
/// - `Ok(())`: 删除成功
/// - `Err(e)`: 删除失败
Future<void> removeSubscription({required String id}) =>
    V8RayBridge.instance.api.crateBridgeApiRemoveSubscription(id: id);

/// 更新订阅
///
/// # 参数
/// - `id`: 订阅 ID
///
/// # 返回
/// - `Ok(())`: 更新成功
/// - `Err(e)`: 更新失败
Future<void> updateSubscription({required String id}) =>
    V8RayBridge.instance.api.crateBridgeApiUpdateSubscription(id: id);

/// 更新所有订阅
///
/// # 返回
/// - `Ok(())`: 更新成功
/// - `Err(e)`: 更新失败
Future<void> updateAllSubscriptions() =>
    V8RayBridge.instance.api.crateBridgeApiUpdateAllSubscriptions();

/// 获取所有订阅
///
/// # 返回
/// - `Ok(subscriptions)`: 订阅列表
/// - `Err(e)`: 获取失败
Future<List<SubscriptionInfo>> getSubscriptions() =>
    V8RayBridge.instance.api.crateBridgeApiGetSubscriptions();

/// 获取所有服务器
///
/// # 返回
/// - `Ok(servers)`: 服务器列表
/// - `Err(e)`: 获取失败
Future<List<ServerInfo>> getServers() =>
    V8RayBridge.instance.api.crateBridgeApiGetServers();

/// 获取指定订阅的服务器
///
/// # 参数
/// - `subscription_id`: 订阅 ID
///
/// # 返回
/// - `Ok(servers)`: 服务器列表
/// - `Err(e)`: 获取失败
Future<List<ServerInfo>> getServersForSubscription({
  required String subscriptionId,
}) => V8RayBridge.instance.api.crateBridgeApiGetServersForSubscription(
  subscriptionId: subscriptionId,
);

/// 获取服务器配置
///
/// # 参数
/// - `server_id`: 服务器 ID
///
/// # 返回
/// - `Ok(config)`: 服务器配置
/// - `Err(e)`: 获取失败
Future<ProxyServerConfig> getServerConfig({required String serverId}) =>
    V8RayBridge.instance.api.crateBridgeApiGetServerConfig(serverId: serverId);

/// 从存储加载订阅
///
/// # 返回
/// - `Ok(())`: 加载成功
/// - `Err(e)`: 加载失败
Future<void> loadSubscriptionsFromStorage() =>
    V8RayBridge.instance.api.crateBridgeApiLoadSubscriptionsFromStorage();

/// 设置系统代理
///
/// # 参数
/// - `http_port`: HTTP 代理端口
/// - `socks_port`: SOCKS 代理端口
///
/// # 返回
/// - `Ok(())`: 设置成功
/// - `Err(e)`: 设置失败
void setSystemProxy({required int httpPort, required int socksPort}) =>
    V8RayBridge.instance.api.crateBridgeApiSetSystemProxy(
      httpPort: httpPort,
      socksPort: socksPort,
    );

/// 清除系统代理
///
/// # 返回
/// - `Ok(())`: 清除成功
/// - `Err(e)`: 清除失败
void clearSystemProxy() =>
    V8RayBridge.instance.api.crateBridgeApiClearSystemProxy();

/// 检查系统代理是否已设置
///
/// # 返回
/// - `Ok(true)`: 代理已设置
/// - `Ok(false)`: 代理未设置
/// - `Err(e)`: 检查失败
bool isSystemProxySet() =>
    V8RayBridge.instance.api.crateBridgeApiIsSystemProxySet();

/// 检查 Xray Core 更新
///
/// # 返回
/// - `Ok(info)`: 更新信息
/// - `Err(e)`: 检查失败
Future<XrayCoreUpdateInfo> checkXrayCoreUpdate() =>
    V8RayBridge.instance.api.crateBridgeApiCheckXrayCoreUpdate();

/// 下载并安装 Xray Core 更新
///
/// # 参数
/// - `version`: 要更新的版本号
///
/// # 返回
/// - `Ok(())`: 更新成功
/// - `Err(e)`: 更新失败
Future<void> updateXrayCore({required String version}) =>
    V8RayBridge.instance.api.crateBridgeApiUpdateXrayCore(version: version);

/// 获取 Xray Core 下载进度
///
/// # 返回
/// - 下载进度 (0.0 到 1.0)
Future<double> getXrayCoreUpdateProgress() =>
    V8RayBridge.instance.api.crateBridgeApiGetXrayCoreUpdateProgress();

/// 获取平台信息
///
/// # 返回
/// 平台信息，包括操作系统、架构、版本和功能支持
PlatformInfo getPlatformInfo() =>
    V8RayBridge.instance.api.crateBridgeApiGetPlatformInfo();

/// 检查是否有管理员权限
///
/// # 返回
/// * `Ok(true)` - 有管理员权限
/// * `Ok(false)` - 没有管理员权限
/// * `Err(String)` - 检查失败
bool hasAdminPrivileges() =>
    V8RayBridge.instance.api.crateBridgeApiHasAdminPrivileges();

/// 配置信息
class ConfigInfo {
  const ConfigInfo({
    required this.id,
    required this.name,
    required this.server,
    required this.port,
    required this.protocol,
    required this.enabled,
    required this.createdAt,
    required this.updatedAt,
  });

  /// 配置 ID
  final String id;

  /// 配置名称
  final String name;

  /// 服务器地址
  final String server;

  /// 端口
  final int port;

  /// 协议类型
  final String protocol;

  /// 是否启用
  final bool enabled;

  /// 创建时间（Unix 时间戳）
  final PlatformInt64 createdAt;

  /// 更新时间（Unix 时间戳）
  final PlatformInt64 updatedAt;

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      server.hashCode ^
      port.hashCode ^
      protocol.hashCode ^
      enabled.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConfigInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          server == other.server &&
          port == other.port &&
          protocol == other.protocol &&
          enabled == other.enabled &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

/// 连接信息
class ConnectionInfo {
  const ConnectionInfo({
    required this.status,
    required this.duration,
    required this.uploadBytes,
    required this.downloadBytes,
    this.serverAddress,
    this.latencyMs,
  });

  /// 连接状态
  final ConnectionStatus status;

  /// 服务器地址
  final String? serverAddress;

  /// 连接时长（秒）
  final BigInt duration;

  /// 上传流量（字节）
  final BigInt uploadBytes;

  /// 下载流量（字节）
  final BigInt downloadBytes;

  /// 延迟（毫秒）
  final int? latencyMs;

  @override
  int get hashCode =>
      status.hashCode ^
      serverAddress.hashCode ^
      duration.hashCode ^
      uploadBytes.hashCode ^
      downloadBytes.hashCode ^
      latencyMs.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ConnectionInfo &&
          runtimeType == other.runtimeType &&
          status == other.status &&
          serverAddress == other.serverAddress &&
          duration == other.duration &&
          uploadBytes == other.uploadBytes &&
          downloadBytes == other.downloadBytes &&
          latencyMs == other.latencyMs;
}

/// 连接状态
enum ConnectionStatus {
  /// 已断开
  disconnected,

  /// 连接中
  connecting,

  /// 已连接
  connected,

  /// 断开中
  disconnecting,

  /// 错误
  error,
}

/// 简化的代理服务器配置（用于 FFI）
class ProxyServerConfig {
  const ProxyServerConfig({
    required this.id,
    required this.name,
    required this.address,
    required this.port,
    required this.protocol,
    required this.settings,
    required this.tags,
    this.streamSettings,
  });

  /// 服务器 ID
  final String id;

  /// 服务器名称
  final String name;

  /// 服务器地址
  final String address;

  /// 服务器端口
  final int port;

  /// 协议类型
  final String protocol;

  /// 协议特定设置
  final Map<String, Value> settings;

  /// 流设置 (传输层配置)
  final Value? streamSettings;

  /// 标签
  final List<String> tags;

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      address.hashCode ^
      port.hashCode ^
      protocol.hashCode ^
      settings.hashCode ^
      streamSettings.hashCode ^
      tags.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProxyServerConfig &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          address == other.address &&
          port == other.port &&
          protocol == other.protocol &&
          settings == other.settings &&
          streamSettings == other.streamSettings &&
          tags == other.tags;
}

/// 服务器信息
class ServerInfo {
  const ServerInfo({
    required this.id,
    required this.subscriptionId,
    required this.name,
    required this.address,
    required this.port,
    required this.protocol,
  });

  /// 服务器 ID
  final String id;

  /// 所属订阅 ID
  final String subscriptionId;

  /// 服务器名称
  final String name;

  /// 服务器地址
  final String address;

  /// 端口
  final int port;

  /// 协议类型
  final String protocol;

  @override
  int get hashCode =>
      id.hashCode ^
      subscriptionId.hashCode ^
      name.hashCode ^
      address.hashCode ^
      port.hashCode ^
      protocol.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ServerInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          subscriptionId == other.subscriptionId &&
          name == other.name &&
          address == other.address &&
          port == other.port &&
          protocol == other.protocol;
}

/// 订阅信息
class SubscriptionInfo {
  const SubscriptionInfo({
    required this.id,
    required this.name,
    required this.url,
    required this.serverCount,
    required this.status,
    this.lastUpdate,
  });

  /// 订阅 ID
  final String id;

  /// 订阅名称
  final String name;

  /// 订阅 URL
  final String url;

  /// 最后更新时间（Unix 时间戳）
  final PlatformInt64? lastUpdate;

  /// 服务器数量
  final int serverCount;

  /// 订阅状态
  final String status;

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      url.hashCode ^
      lastUpdate.hashCode ^
      serverCount.hashCode ^
      status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SubscriptionInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          url == other.url &&
          lastUpdate == other.lastUpdate &&
          serverCount == other.serverCount &&
          status == other.status;
}

/// Xray Core 更新信息
class XrayCoreUpdateInfo {
  const XrayCoreUpdateInfo({
    required this.hasUpdate,
    required this.currentVersion,
    required this.latestVersion,
    required this.downloadUrl,
    required this.fileSize,
  });

  /// 是否有更新
  final bool hasUpdate;

  /// 当前版本
  final String currentVersion;

  /// 最新版本
  final String latestVersion;

  /// 下载 URL
  final String downloadUrl;

  /// 文件大小（字节）
  final BigInt fileSize;

  @override
  int get hashCode =>
      hasUpdate.hashCode ^
      currentVersion.hashCode ^
      latestVersion.hashCode ^
      downloadUrl.hashCode ^
      fileSize.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is XrayCoreUpdateInfo &&
          runtimeType == other.runtimeType &&
          hasUpdate == other.hasUpdate &&
          currentVersion == other.currentVersion &&
          latestVersion == other.latestVersion &&
          downloadUrl == other.downloadUrl &&
          fileSize == other.fileSize;
}
