// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'frb_generated.dart';
import 'lib.dart';

/// gRPC settings
class GrpcSettings {
  const GrpcSettings({
    required this.serviceName,
    required this.multiMode,
  });

  /// Service name
  final String serviceName;

  /// Multi mode
  final bool multiMode;

  @override
  int get hashCode => serviceName.hashCode ^ multiMode.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GrpcSettings &&
          runtimeType == other.runtimeType &&
          serviceName == other.serviceName &&
          multiMode == other.multiMode;
}

/// Proxy protocol types
enum ProxyProtocol {
  /// VLESS protocol
  vless,

  /// VMess protocol
  vmess,

  /// Trojan protocol
  trojan,

  /// Shadowsocks protocol
  shadowsocks,

  /// HTTP proxy
  http,

  /// SOCKS proxy
  socks,
  ;
}

/// Proxy server configuration
class ProxyServerConfig {
  const ProxyServerConfig({
    required this.id,
    required this.name,
    required this.server,
    required this.port,
    required this.protocol,
    required this.settings,
    required this.tags,
    required this.createdAt,
    required this.updatedAt,
    this.streamSettings,
  });

  /// Unique identifier
  final String id;

  /// Display name
  final String name;

  /// Server address
  final String server;

  /// Server port
  final int port;

  /// Protocol type
  final ProxyProtocol protocol;

  /// Protocol-specific settings
  final Map<String, Value> settings;

  /// Stream settings (transport)
  final StreamSettings? streamSettings;

  /// Tags for categorization
  final List<String> tags;

  /// Creation timestamp
  final DateTime createdAt;

  /// Last update timestamp
  final DateTime updatedAt;

  @override
  int get hashCode =>
      id.hashCode ^
      name.hashCode ^
      server.hashCode ^
      port.hashCode ^
      protocol.hashCode ^
      settings.hashCode ^
      streamSettings.hashCode ^
      tags.hashCode ^
      createdAt.hashCode ^
      updatedAt.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ProxyServerConfig &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          name == other.name &&
          server == other.server &&
          port == other.port &&
          protocol == other.protocol &&
          settings == other.settings &&
          streamSettings == other.streamSettings &&
          tags == other.tags &&
          createdAt == other.createdAt &&
          updatedAt == other.updatedAt;
}

/// Stream settings for transport
class StreamSettings {
  const StreamSettings({
    required this.network,
    required this.security,
    this.tlsSettings,
    this.tcpSettings,
    this.wsSettings,
    this.httpSettings,
    this.quicSettings,
    this.grpcSettings,
  });

  /// Network type (tcp, kcp, ws, http, quic, grpc)
  final String network;

  /// Security type (none, tls, reality)
  final String security;

  /// TLS settings
  final TlsSettings? tlsSettings;

  /// TCP settings
  final Value? tcpSettings;

  /// WebSocket settings
  final WsSettings? wsSettings;

  /// HTTP/2 settings
  final Value? httpSettings;

  /// QUIC settings
  final Value? quicSettings;

  /// gRPC settings
  final GrpcSettings? grpcSettings;

  @override
  int get hashCode =>
      network.hashCode ^
      security.hashCode ^
      tlsSettings.hashCode ^
      tcpSettings.hashCode ^
      wsSettings.hashCode ^
      httpSettings.hashCode ^
      quicSettings.hashCode ^
      grpcSettings.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is StreamSettings &&
          runtimeType == other.runtimeType &&
          network == other.network &&
          security == other.security &&
          tlsSettings == other.tlsSettings &&
          tcpSettings == other.tcpSettings &&
          wsSettings == other.wsSettings &&
          httpSettings == other.httpSettings &&
          quicSettings == other.quicSettings &&
          grpcSettings == other.grpcSettings;
}

/// TLS settings
class TlsSettings {
  const TlsSettings({
    required this.allowInsecure,
    required this.alpn,
    this.serverName,
    this.fingerprint,
  });

  /// Server name indication
  final String? serverName;

  /// Allow insecure connections
  final bool allowInsecure;

  /// ALPN protocols
  final List<String> alpn;

  /// Fingerprint
  final String? fingerprint;

  @override
  int get hashCode =>
      serverName.hashCode ^
      allowInsecure.hashCode ^
      alpn.hashCode ^
      fingerprint.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TlsSettings &&
          runtimeType == other.runtimeType &&
          serverName == other.serverName &&
          allowInsecure == other.allowInsecure &&
          alpn == other.alpn &&
          fingerprint == other.fingerprint;
}

/// WebSocket settings
class WsSettings {
  const WsSettings({
    required this.path,
    required this.headers,
  });

  /// WebSocket path
  final String path;

  /// Custom headers
  final Map<String, String> headers;

  @override
  int get hashCode => path.hashCode ^ headers.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WsSettings &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          headers == other.headers;
}
